agregar

// Evento para enviar el formulario
form.addEventListener("submit", function (event) {
    event.preventDefault(); // Evita que se recargue la página al enviar el formulario

    console.log("Evento submit está funcionando"); // Agregar este console.log

    if (!isSubmitting) {
        isSubmitting = true; // Bloquea el formulario

        const unidadInput = document.getElementById("validationCustom01").value;
        const estadoInput = document.getElementById("validationCustom04").value;

        // Verifica que los campos no estén vacíos
        if (unidadInput.trim() !== "" && estadoInput.trim() !== "") {
            // Obtener la fecha y hora actual en la zona horaria de Panamá
            const now = new Date();
            const options = { timeZone: "America/Panama" };
            const formattedDateTime = now
                .toLocaleString("es-PA", options)
                .replace(/\./, "")
                .replace(/T/, " ")
                .replace(/\s([ap])\./, " $1.m.")
                .replace(/(\d+)\/(\d+)\/(\d+),/, "$3-$1-$2,")
                .toUpperCase(); // Convertir a mayúsculas

            console.log("Fecha y hora actual en Panamá:", formattedDateTime);

            // Crear un nuevo objeto con los datos a guardar
            const nuevoRegistro = {
                hora: formattedDateTime, // Obtener la fecha y hora actual del cliente
                unidad: unidadInput,
                estado: estadoInput,
            };

            // Obtener una referencia a la ubicación en la base de datos donde se guardarán los datos
            const referenciaUnidades = ref(database, collection);

            // Agregar datos a la base de datos
            push(referenciaUnidades, nuevoRegistro)
                .then(() => {
                    // Limpia los campos del formulario
                    form.reset();
                    // Desbloquea el formulario después de 1 segundos
                    setTimeout(() => {
                        isSubmitting = false;
                    }, 1000);
                    // Recarga la página después de enviar el formulario
                    setTimeout(() => {
                        location.reload();
                    }, 100);
                })
                .catch((error) => {
                    console.error("Error al enviar datos a la base de datos:", error);
                });
        } else {
            alert("Por favor completa todos los campos.");
        }
    } else {
        alert(
            "Ya se está enviando un formulario. Por favor espera unos momentos antes de intentar de nuevo."
        );
    }
});

// Suscribirse a eventos en tiempo real para actualizar la tabla automáticamente
onValue(ref(database, collection), (snapshot) => {
    mostrarDatos(); // Mostrar los datos actualizados en la tabla
    setTimeout(mostrarDatos, 200); // Actualizar la tabla automáticamente después de 1 segundo
});

//***-----------------------------------------------------------------------------
// Evento para actualizar el estado al cambiar el select
tabla.addEventListener("change", function (event) {
    if (event.target.classList.contains("estado-select")) {
        const confirmar = confirm("¿Estás seguro de que deseas cambiar el estado?");
        if (confirmar) {
            const id = event.target.getAttribute("data-id");
            const nuevoEstado = event.target.value;

            console.log("ID:", id);
            console.log("Nuevo estado:", nuevoEstado);
            update(ref(database, `${collection}/${id}`), { estado: nuevoEstado })
                .then(() => {
                    console.log("Estado actualizado exitosamente");
                })
                .catch((error) => {
                    console.error("Error al actualizar el estado:", error);
                });
        } else {
            // Volver al estado original si se cancela la operación
            mostrarDatos();
        }
    }
});